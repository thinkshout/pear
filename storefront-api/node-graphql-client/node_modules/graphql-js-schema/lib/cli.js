#!/usr/bin/env node
'use strict';

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _tmp = require('tmp');

var _tmp2 = _interopRequireDefault(_tmp);

var _rollup = require('rollup');

var _lodash = require('lodash.kebabcase');

var _lodash2 = _interopRequireDefault(_lodash);

var _parseArgs = require('./parse-args');

var _parseArgs2 = _interopRequireDefault(_parseArgs);

var _help = require('./help');

var _help2 = _interopRequireDefault(_help);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function logFileWrite(filePath) {
  console.log(`wroteFile: ${ filePath }`);
}

function writeFiles(outdir, files, quiet = false) {
  return Promise.all(files.map(file => {
    return new Promise((resolve, reject) => {
      _fs2.default.writeFile(_path2.default.join(outdir, file.path), file.body, err => {
        if (err) {
          reject(err);

          return;
        }

        if (!quiet) {
          logFileWrite(_path2.default.join(outdir, file.path));
        }
        resolve();
      });
    });
  }));
}

function rollupAndWriteBundle(schemaBundleName, outdir, files) {
  const tmpDir = _tmp2.default.dirSync();

  _mkdirp2.default.sync(_path2.default.join(tmpDir.name, 'types'));

  const entryFilename = `${ (0, _lodash2.default)(schemaBundleName) }.js`;
  const entryFilePath = _path2.default.join(tmpDir.name, entryFilename);
  const bundleFilePath = _path2.default.join(outdir, entryFilename);

  return writeFiles(tmpDir.name, files, true).then(() => {
    return (0, _rollup.rollup)({
      entry: entryFilePath
    });
  }).then(bundle => {
    return bundle.write({
      format: 'es',
      dest: bundleFilePath
    });
  }).then(() => {
    logFileWrite(bundleFilePath);
  });
}

function runCli() {
  _tmp2.default.setGracefulCleanup();

  const args = (0, _parseArgs2.default)(process.argv.slice(2));

  if (args.showHelp) {
    console.log(_help2.default);
    process.exit(0);
  }

  const introspectionResponse = JSON.parse(_fs2.default.readFileSync(args.schemaFile));
  const files = (0, _index2.default)(introspectionResponse, args.schemaBundleName, args.whitelistTypes);

  if (args.bundleOnly) {
    return rollupAndWriteBundle(args.schemaBundleName, args.outdir, files);
  } else {
    _mkdirp2.default.sync(_path2.default.join(args.outdir, 'types'));

    return writeFiles(args.outdir, files);
  }
}

runCli().catch(error => {
  console.trace(error);
  process.exit(1);
});