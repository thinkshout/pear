{"version":3,"file":"index.es.js","sources":["src/join.js","src/is-object.js","src/deep-freeze-copy-except.js","src/schema-for-type.js","src/variable.js","src/enum.js","src/scalar.js","src/format-input-value.js","src/format-object.js","src/format-args.js","src/noop.js","src/selection-set.js","src/operation.js","src/query.js","src/mutation.js","src/document.js","src/graph-model.js","src/class-registry.js","src/is-value.js","src/is-node-context.js","src/transform-connection.js","src/decode.js","src/http-fetcher.js","src/client.js"],"sourcesContent":["export default function join(...fields) {\n  return fields.join(' ');\n}\n","export default function isObject(value) {\n  return Boolean(value) && Object.prototype.toString.call(value.valueOf()) === '[object Object]';\n}\n","import isObject from './is-object';\n\nexport default function deepFreezeCopyExcept(predicate, structure) {\n  if (predicate(structure)) {\n    return structure;\n  } else if (isObject(structure)) {\n    return Object.freeze(Object.keys(structure).reduce((copy, key) => {\n      copy[key] = deepFreezeCopyExcept(predicate, structure[key]);\n\n      return copy;\n    }, {}));\n  } else if (Array.isArray(structure)) {\n    return Object.freeze(structure.map((item) => deepFreezeCopyExcept(predicate, item)));\n  } else {\n    return structure;\n  }\n}\n","export default function schemaForType(typeBundle, typeName) {\n  const type = typeBundle.types[typeName];\n\n  if (type) {\n    return type;\n  }\n\n  throw new Error(`No type of ${typeName} found in schema`);\n}\n\n","import formatInputValue from './format-input-value';\n\nexport class VariableDefinition {\n  constructor(name, type, defaultValue) {\n    this.name = name;\n    this.type = type;\n    this.defaultValue = defaultValue;\n    Object.freeze(this);\n  }\n\n  toInputValueString() {\n    return `$${this.name}`;\n  }\n\n  toString() {\n    const defaultValueString = this.defaultValue ? ` = ${formatInputValue(this.defaultValue)}` : '';\n\n    return `$${this.name}:${this.type}${defaultValueString}`;\n  }\n}\n\nexport function isVariable(value) {\n  return value instanceof VariableDefinition;\n}\n\nexport default function variable(name, type, defaultValue) {\n  return new VariableDefinition(name, type, defaultValue);\n}\n","export class Enum {\n  constructor(key) {\n    this.key = key;\n  }\n\n  toString() {\n    return this.key;\n  }\n\n  valueOf() {\n    return this.key.valueOf();\n  }\n}\n\nexport default (key) => {\n  return new Enum(key);\n};\n","export default class Scalar {\n  constructor(value) {\n    this.value = value;\n  }\n\n  toString() {\n    return this.value.toString();\n  }\n\n  valueOf() {\n    return this.value.valueOf();\n  }\n\n  get unwrapped() {\n    return this.value;\n  }\n}\n","import formatObject from './format-object';\nimport isObject from './is-object';\nimport join from './join';\nimport {VariableDefinition} from './variable';\nimport {Enum} from './enum';\nimport Scalar from './scalar';\n\nexport default function formatInputValue(value) {\n  if (VariableDefinition.prototype.isPrototypeOf(value)) {\n    return value.toInputValueString();\n  } else if (Enum.prototype.isPrototypeOf(value)) {\n    return String(value);\n  } else if (Scalar.prototype.isPrototypeOf(value)) {\n    return JSON.stringify(value.valueOf());\n  } else if (Array.isArray(value)) {\n    return `[${join(...value.map(formatInputValue))}]`;\n  } else if (isObject(value)) {\n    return formatObject(value, '{', '}');\n  } else {\n    return JSON.stringify(value);\n  }\n}\n","import formatInputValue from './format-input-value';\nimport join from './join';\n\nexport default function formatObject(value, openChar = '', closeChar = '') {\n  const argPairs = Object.keys(value).map((key) => {\n    return `${key}: ${formatInputValue(value[key])}`;\n  });\n\n  return `${openChar}${join(...argPairs)}${closeChar}`;\n}\n","import formatObject from './format-object';\n\nexport default function formatArgs(args) {\n  if (!Object.keys(args).length) {\n    return '';\n  }\n\n  return ` (${formatObject(args)})`;\n}\n","// eslint-disable-next-line no-empty-function\nexport default () => {};\n","import deepFreezeCopyExcept from './deep-freeze-copy-except';\nimport join from './join';\nimport schemaForType from './schema-for-type';\nimport formatArgs from './format-args';\nimport noop from './noop';\nimport {isVariable} from './variable';\nimport trackTypeDependency from './track-type-dependency';\n\nfunction parseFieldCreationArgs(creationArgs) {\n  let callback = noop;\n  let options = {};\n  let selectionSet = null;\n\n  if (creationArgs.length === 2) {\n    if (typeof creationArgs[1] === 'function') {\n      [options, callback] = creationArgs;\n    } else {\n      [options, selectionSet] = creationArgs;\n    }\n  } else if (creationArgs.length === 1) {\n    // SelectionSet is defined before this function is called since it's\n    // called by SelectionSet\n    // eslint-disable-next-line no-use-before-define\n    if (SelectionSet.prototype.isPrototypeOf(creationArgs[0])) {\n      selectionSet = creationArgs[0];\n    } else if (typeof creationArgs[0] === 'function') {\n      callback = creationArgs[0];\n    } else {\n      options = creationArgs[0];\n    }\n  }\n\n  return {options, selectionSet, callback};\n}\n\nconst emptyArgs = Object.freeze({});\n\nexport class Field {\n  constructor(name, options, selectionSet) {\n    this.name = name;\n    this.alias = options.alias || null;\n    this.responseKey = this.alias || this.name;\n    this.args = (options.args ? deepFreezeCopyExcept(isVariable, options.args) : emptyArgs);\n    this.selectionSet = selectionSet;\n    Object.freeze(this);\n  }\n  toString() {\n    const aliasPrefix = this.alias ? `${this.alias}: ` : '';\n\n    return `${aliasPrefix}${this.name}${formatArgs(this.args)}${this.selectionSet}`;\n  }\n}\n\n// This is an interface that defines a usage, and simplifies type checking\nexport class Spread {}\n\nexport class InlineFragment extends Spread {\n  constructor(typeName, selectionSet) {\n    super();\n    this.typeName = typeName;\n    this.selectionSet = selectionSet;\n    Object.freeze(this);\n  }\n  toString() {\n    return `... on ${this.typeName}${this.selectionSet}`;\n  }\n}\n\nexport class FragmentSpread extends Spread {\n  constructor(fragmentDefinition) {\n    super();\n    this.name = fragmentDefinition.name;\n    this.selectionSet = fragmentDefinition.selectionSet;\n    Object.freeze(this);\n  }\n\n  toString() {\n    return `...${this.name}`;\n  }\n}\n\nexport class FragmentDefinition {\n  constructor(name, typeName, selectionSet) {\n    this.name = name;\n    this.typeName = typeName;\n    this.selectionSet = selectionSet;\n    this.spread = new FragmentSpread(this);\n    Object.freeze(this);\n  }\n\n  toString() {\n    return `fragment ${this.name} on ${this.typeName} ${this.selectionSet}`;\n  }\n}\n\n\nfunction selectionsHaveIdField(selections) {\n  return selections.some((fieldOrFragment) => {\n    if (Field.prototype.isPrototypeOf(fieldOrFragment)) {\n      return fieldOrFragment.name === 'id';\n    } else if (Spread.prototype.isPrototypeOf(fieldOrFragment) && fieldOrFragment.selectionSet.typeSchema.implementsNode) {\n      return selectionsHaveIdField(fieldOrFragment.selectionSet.selections);\n    }\n\n    return false;\n  });\n}\n\nfunction selectionsHaveTypenameField(selections) {\n  return selections.some((fieldOrFragment) => {\n    if (Field.prototype.isPrototypeOf(fieldOrFragment)) {\n      return fieldOrFragment.name === '__typename';\n    } else if (Spread.prototype.isPrototypeOf(fieldOrFragment) && fieldOrFragment.selectionSet.typeSchema.implementsNode) {\n      return selectionsHaveTypenameField(fieldOrFragment.selectionSet.selections);\n    }\n\n    return false;\n  });\n}\n\nfunction indexSelectionsByResponseKey(selections) {\n  function assignOrPush(obj, key, value) {\n    if (Array.isArray(obj[key])) {\n      obj[key].push(value);\n    } else {\n      obj[key] = [value];\n    }\n  }\n  const unfrozenObject = selections.reduce((acc, selection) => {\n    if (selection.responseKey) {\n      assignOrPush(acc, selection.responseKey, selection);\n    } else {\n      const responseKeys = Object.keys(selection.selectionSet.selectionsByResponseKey);\n\n      responseKeys.forEach((responseKey) => {\n        assignOrPush(acc, responseKey, selection);\n      });\n    }\n\n    return acc;\n  }, {});\n\n  Object.keys(unfrozenObject).forEach((key) => {\n    Object.freeze(unfrozenObject[key]);\n  });\n\n  return Object.freeze(unfrozenObject);\n}\n\nexport default class SelectionSet {\n  constructor(typeBundle, type, builderFunction) {\n\n    if (typeof type === 'string') {\n      this.typeSchema = schemaForType(typeBundle, type);\n    } else {\n      this.typeSchema = type;\n    }\n\n    trackTypeDependency(this.typeSchema.name);\n\n    this.typeBundle = typeBundle;\n    this.selections = [];\n    if (builderFunction) {\n      // eslint-disable-next-line no-use-before-define\n      builderFunction(new SelectionSetBuilder(this.typeBundle, this.typeSchema, this.selections));\n    }\n\n    if (this.typeSchema.implementsNode || this.typeSchema.name === 'Node') {\n      if (!selectionsHaveIdField(this.selections)) {\n        this.selections.unshift(new Field('id', {}, new SelectionSet(typeBundle, 'ID')));\n      }\n    }\n\n    if (this.typeSchema.kind === 'INTERFACE') {\n      if (!selectionsHaveTypenameField(this.selections)) {\n        this.selections.unshift(new Field('__typename', {}, new SelectionSet(typeBundle, 'String')));\n      }\n    }\n\n    this.selectionsByResponseKey = indexSelectionsByResponseKey(this.selections);\n    Object.freeze(this.selections);\n    Object.freeze(this);\n  }\n\n  toString() {\n    if (this.typeSchema.kind === 'SCALAR' || this.typeSchema.kind === 'ENUM') {\n      return '';\n    } else {\n      return ` { ${join(this.selections)} }`;\n    }\n  }\n}\n\nclass SelectionSetBuilder {\n  constructor(typeBundle, typeSchema, selections) {\n    this.typeBundle = typeBundle;\n    this.typeSchema = typeSchema;\n    this.selections = selections;\n  }\n\n  hasSelectionWithResponseKey(responseKey) {\n    return this.selections.some((field) => {\n      return field.responseKey === responseKey;\n    });\n  }\n\n  add(selectionOrFieldName, ...rest) {\n    let selection;\n\n    if (Object.prototype.toString.call(selectionOrFieldName) === '[object String]') {\n      selection = this.field(selectionOrFieldName, ...rest);\n    } else {\n      selection = selectionOrFieldName;\n    }\n\n    if (selection.responseKey && this.hasSelectionWithResponseKey(selection.responseKey)) {\n      throw new Error(`The field name or alias '${selection.responseKey}' has already been added.`);\n    }\n    this.selections.push(selection);\n  }\n\n  field(name, ...creationArgs) {\n    const parsedArgs = parseFieldCreationArgs(creationArgs);\n    const {options, callback} = parsedArgs;\n    let {selectionSet} = parsedArgs;\n\n    if (!selectionSet) {\n      if (!this.typeSchema.fieldBaseTypes[name]) {\n        throw new Error(`No field of name \"${name}\" found on type \"${this.typeSchema.name}\" in schema`);\n      }\n\n      const fieldBaseType = schemaForType(this.typeBundle, this.typeSchema.fieldBaseTypes[name]);\n\n      selectionSet = new SelectionSet(this.typeBundle, fieldBaseType, callback);\n    }\n\n    return new Field(name, options, selectionSet);\n  }\n\n  inlineFragmentOn(typeName, builderFunctionOrSelectionSet = noop) {\n    let selectionSet;\n\n    if (SelectionSet.prototype.isPrototypeOf(builderFunctionOrSelectionSet)) {\n      selectionSet = builderFunctionOrSelectionSet;\n    } else {\n      selectionSet = new SelectionSet(\n        this.typeBundle,\n        schemaForType(this.typeBundle, typeName),\n        builderFunctionOrSelectionSet\n      );\n    }\n\n    return new InlineFragment(typeName, selectionSet);\n  }\n\n  /**\n   * will add a field to be queried to the current query node.\n   *\n   * @param {String}    name The name of the field to add to the query\n   * @param {Object}    [args] Arguments for the field to query\n   * @param {Function}  [callback] Callback which will return a new query node for the field added\n   */\n  addField(name, ...creationArgs) {\n    this.add(name, ...creationArgs);\n  }\n\n  /**\n   * will add a connection to be queried to the current query node.\n   *\n   * @param {String}    name The name of the connection to add to the query\n   * @param {Object}    [args] Arguments for the connection query eg. { first: 10 }\n   * @param {Function|SelectionSet}  [callback|selectionSet] Either pass a callback which will return a new\n   *                                                         SelectionSet. Or pass an existing SelectionSet.\n   */\n  addConnection(name, ...creationArgs) {\n    const {options, callback, selectionSet} = parseFieldCreationArgs(creationArgs);\n\n    this.add(name, options, (connection) => {\n      connection.add('pageInfo', {}, (pageInfo) => {\n        pageInfo.add('hasNextPage');\n        pageInfo.add('hasPreviousPage');\n      });\n      connection.add('edges', {}, (edges) => {\n        edges.add('cursor');\n        edges.addField('node', {}, (selectionSet || callback)); // This is bad. Don't do this\n      });\n    });\n  }\n\n  addInlineFragmentOn(typeName, fieldTypeCb = noop) {\n    this.add(this.inlineFragmentOn(typeName, fieldTypeCb));\n  }\n\n  addFragment(fragmentSpread) {\n    this.add(fragmentSpread);\n  }\n}\n","import join from './join';\nimport SelectionSet from './selection-set';\nimport schemaForType from './schema-for-type';\n\nfunction parseArgs(args) {\n  let name;\n  let variables;\n  let selectionSetCallback;\n\n  if (args.length === 3) {\n    [name, variables, selectionSetCallback] = args;\n  } else if (args.length === 2) {\n    if (Object.prototype.toString.call(args[0]) === '[object String]') {\n      name = args[0];\n      variables = null;\n    } else if (Array.isArray(args[0])) {\n      variables = args[0];\n      name = null;\n    }\n\n    selectionSetCallback = args[1];\n  } else {\n    selectionSetCallback = args[0];\n    name = null;\n  }\n\n  return {name, variables, selectionSetCallback};\n}\n\nclass VariableDefinitions {\n  constructor(variableDefinitions) {\n    this.variableDefinitions = variableDefinitions ? [...variableDefinitions] : [];\n    Object.freeze(this.variableDefinitions);\n    Object.freeze(this);\n  }\n\n  toString() {\n    if (this.variableDefinitions.length === 0) {\n      return '';\n    }\n\n    return ` (${join(this.variableDefinitions)}) `;\n  }\n}\n\nexport default class Operation {\n  constructor(typeBundle, operationType, ...args) {\n    const {name, variables, selectionSetCallback} = parseArgs(args);\n\n    this.typeBundle = typeBundle;\n    this.name = name;\n    this.variableDefinitions = new VariableDefinitions(variables);\n    this.operationType = operationType;\n    if (operationType === 'query') {\n      this.selectionSet = new SelectionSet(typeBundle, typeBundle.queryType, selectionSetCallback);\n      this.typeSchema = schemaForType(typeBundle, typeBundle.queryType);\n    } else {\n      this.selectionSet = new SelectionSet(typeBundle, typeBundle.mutationType, selectionSetCallback);\n      this.typeSchema = schemaForType(typeBundle, typeBundle.mutationType);\n    }\n    Object.freeze(this);\n  }\n\n  get isAnonymous() {\n    return !this.name;\n  }\n\n  toString() {\n    const nameString = (this.name) ? ` ${this.name}` : '';\n\n    return `${this.operationType}${nameString}${this.variableDefinitions}${this.selectionSet}`;\n  }\n}\n","import Operation from './operation';\n\nexport default class Query extends Operation {\n  constructor(typeBundle, ...args) {\n    super(typeBundle, 'query', ...args);\n  }\n}\n","import Operation from './operation';\n\nexport default class Mutation extends Operation {\n  constructor(typeBundle, ...args) {\n    super(typeBundle, 'mutation', ...args);\n  }\n}\n","import Query from './query';\nimport Mutation from './mutation';\nimport Operation from './operation';\nimport join from './join';\nimport SelectionSet, {FragmentDefinition} from './selection-set';\n\nfunction isAnonymous(operation) {\n  return operation.isAnonymous;\n}\n\nfunction hasAnonymousOperations(operations) {\n  return operations.some(isAnonymous);\n}\n\nfunction hasDuplicateOperationNames(operations) {\n  const names = operations.map((operation) => operation.name);\n\n  return names.reduce((hasDuplicates, name, index) => {\n    return hasDuplicates || names.indexOf(name) !== index;\n  }, false);\n}\n\nfunction extractOperation(typeBundle, operationType, ...args) {\n  if (Operation.prototype.isPrototypeOf(args[0])) {\n    return args[0];\n  }\n\n  if (operationType === 'query') {\n    return new Query(typeBundle, ...args);\n  } else {\n    return new Mutation(typeBundle, ...args);\n  }\n}\n\nfunction isInvalidOperationCombination(operations) {\n  if (operations.length === 1) {\n    return false;\n  }\n\n  return hasAnonymousOperations(operations) || hasDuplicateOperationNames(operations);\n}\n\nfunction fragmentNameIsNotUnique(existingDefinitions, name) {\n  return existingDefinitions.some((definition) => (definition.name === name));\n}\n\nexport default class Document {\n  constructor(typeBundle) {\n    this.typeBundle = typeBundle;\n    this.definitions = [];\n  }\n\n  toString() {\n    return join(this.definitions);\n  }\n\n  addOperation(operationType, ...args) {\n    const operation = extractOperation(this.typeBundle, operationType, ...args);\n\n    if (isInvalidOperationCombination(this.operations.concat(operation))) {\n      throw new Error('All operations must be named on a multi-operation document');\n    }\n\n    this.definitions.push(operation);\n  }\n\n  /**\n   * will add a query to the document\n   *\n   * @param {Query|String} [query|queryName] Either an instance of a query\n   * object, or the name of a query. Both are optional.\n   * @param {Function} [callback] The query builder callback. If a query\n   * instance is passed, this callback will be ignored.\n   */\n  addQuery(...args) {\n    this.addOperation('query', ...args);\n  }\n\n  /**\n   * will add a mutation to the document\n   *\n   * @param {Mutation|String} [mutation|mutationName] Either an instance of a mutation\n   * object, or the name of a mutation. Both are optional.\n   * @param {Function} [callback] The mutation builder callback. If a mutation\n   * instance is passed, this callback will be ignored.\n   */\n  addMutation(...args) {\n    this.addOperation('mutation', ...args);\n  }\n\n  defineFragment(name, onType, builderFunction) {\n    if (fragmentNameIsNotUnique(this.fragmentDefinitions, name)) {\n      throw new Error('All fragments must be named on a multi-fragment document');\n    }\n\n    const selectionSet = new SelectionSet(this.typeBundle, onType, builderFunction);\n    const fragment = new FragmentDefinition(name, onType, selectionSet);\n\n    this.definitions.push(fragment);\n\n    return fragment.spread;\n  }\n\n  get operations() {\n    return this.definitions.filter((definition) => Operation.prototype.isPrototypeOf(definition));\n  }\n\n  get fragmentDefinitions() {\n    return this.definitions.filter((definition) => FragmentDefinition.prototype.isPrototypeOf(definition));\n  }\n}\n","export default class GraphModel {\n  constructor(attrs) {\n    this.attrs = attrs;\n\n    Object.keys(this.attrs).filter((key) => {\n      return !(key in this);\n    }).forEach((key) => {\n      let descriptor;\n\n      if (attrs[key] === null) {\n        descriptor = {\n          get() {\n            return null;\n          }\n        };\n      } else {\n        descriptor = {\n          get() {\n            return this.attrs[key].valueOf();\n          }\n        };\n      }\n      Object.defineProperty(this, key, descriptor);\n    });\n  }\n}\n","import GraphModel from './graph-model';\n\nexport default class ClassRegistry {\n  constructor() {\n    this.classStore = {};\n  }\n\n  registerClassForType(constructor, type) {\n    this.classStore[type] = constructor;\n  }\n\n  unregisterClassForType(type) {\n    delete this.classStore[type];\n  }\n\n  classForType(type) {\n    return this.classStore[type] || GraphModel;\n  }\n}\n","export default function isValue(arg) {\n  return Object.prototype.toString.call(arg) !== '[object Null]' && Object.prototype.toString.call(arg) !== '[object Undefined]';\n}\n","export default function isNodeContext(context) {\n  return context.selection.selectionSet.typeSchema.implementsNode;\n}\n","import Query from './query';\nimport isNodeContext from './is-node-context';\nimport variable from './variable';\nimport Scalar from './scalar';\n\nfunction isConnection(context) {\n  return context.selection.selectionSet.typeSchema.name.endsWith('Connection');\n}\n\nfunction nearestNode(context) {\n  if (context == null) {\n    return null;\n  } else if (isNodeContext(context)) {\n    return context;\n  } else {\n    return nearestNode(context.parent);\n  }\n}\n\nfunction contextsFromRoot(context) {\n  if (context.parent) {\n    return contextsFromRoot(context.parent).concat(context);\n  } else {\n    return [context];\n  }\n}\n\nfunction contextsFromNearestNode(context) {\n  if (context.selection.selectionSet.typeSchema.implementsNode) {\n    return [context];\n  } else {\n    return contextsFromNearestNode(context.parent).concat(context);\n  }\n}\n\nfunction addNextFieldTo(currentSelection, contextChain, cursor, path) {\n  // There are always at least two. When we start, it's the root context, and the first set\n  const nextContext = contextChain.shift();\n\n  path.push(nextContext.selection.responseKey);\n\n  if (contextChain.length) {\n    currentSelection.add(nextContext.selection.name, {alias: nextContext.selection.alias, args: nextContext.selection.args}, (newSelection) => {\n      addNextFieldTo(newSelection, contextChain, cursor, path);\n    });\n  } else {\n    const edgesField = nextContext.selection.selectionSet.selections.find((field) => {\n      return field.name === 'edges';\n    });\n    const nodeField = edgesField.selectionSet.selections.find((field) => {\n      return field.name === 'node';\n    });\n    const first = variable('first', 'Int', nextContext.selection.args.first);\n    const options = {\n      alias: nextContext.selection.alias,\n      args: Object.assign({}, nextContext.selection.args, {after: cursor, first})\n    };\n\n    currentSelection.addConnection(nextContext.selection.name, options, nodeField.selectionSet);\n  }\n}\n\nfunction nextPageQueryAndPath(context, cursor) {\n  const nearestNodeContext = nearestNode(context);\n  const path = [];\n\n  if (nearestNodeContext) {\n    return function() {\n      const nodeType = nearestNodeContext.selection.selectionSet.typeSchema;\n      const nodeId = nearestNodeContext.responseData.id;\n      const contextChain = contextsFromNearestNode(context);\n      const first = contextChain[contextChain.length - 1].selection.args.first;\n\n      const query = new Query(context.selection.selectionSet.typeBundle, [variable('first', 'Int', first)], (root) => {\n        path.push('node');\n        root.add('node', {args: {id: nodeId}}, (node) => {\n          node.addInlineFragmentOn(nodeType.name, (fragment) => {\n            addNextFieldTo(fragment, contextChain.slice(1), cursor, path);\n          });\n        });\n      });\n\n      return [query, path];\n    };\n  } else {\n    return function() {\n      const contextChain = contextsFromRoot(context);\n      const first = contextChain[contextChain.length - 1].selection.args.first;\n\n      const query = new Query(context.selection.selectionSet.typeBundle, [variable('first', 'Int', first)], (root) => {\n        addNextFieldTo(root, contextChain.slice(1), cursor, path);\n      });\n\n      return [query, path];\n    };\n  }\n}\n\nfunction hasNextPage(connection, edge) {\n  if (edge !== connection.edges[connection.edges.length - 1]) {\n    return new Scalar(true);\n  }\n\n  return connection.pageInfo.hasNextPage;\n}\n\nfunction hasPreviousPage(connection, edge) {\n  if (edge !== connection.edges[0]) {\n    return new Scalar(true);\n  }\n\n  return connection.pageInfo.hasPreviousPage;\n}\n\nexport default function transformConnections(context, value) {\n  if (isConnection(context)) {\n    if (!(value.pageInfo && value.pageInfo.hasOwnProperty('hasNextPage') && value.pageInfo.hasOwnProperty('hasPreviousPage'))) {\n      throw new Error('Connections must include the selections \"pageInfo { hasNextPage, hasPreviousPage }\".');\n    }\n\n    return value.edges.map((edge) => {\n      return Object.assign(edge.node, {\n        nextPageQueryAndPath: nextPageQueryAndPath(context, edge.cursor),\n        hasNextPage: hasNextPage(value, edge),\n        hasPreviousPage: hasPreviousPage(value, edge)\n      });\n    });\n  } else {\n    return value;\n  }\n}\n","/* eslint-disable no-warning-comments */\nimport ClassRegistry from './class-registry';\nimport {Field, Spread} from './selection-set';\nimport Query from './query';\nimport isObject from './is-object';\nimport isValue from './is-value';\nimport isNodeContext from './is-node-context';\nimport transformConnections from './transform-connection';\nimport schemaForType from './schema-for-type';\nimport Scalar from './scalar';\nimport {Enum} from './enum';\n\nclass DecodingContext {\n  constructor(selection, responseData, parent = null) {\n    this.selection = selection;\n    this.responseData = responseData;\n    this.parent = parent;\n    Object.freeze(this);\n  }\n\n  contextForObjectProperty(responseKey) {\n    const nestedSelections = this.selection.selectionSet.selectionsByResponseKey[responseKey];\n    const nextSelection = nestedSelections && nestedSelections[0];\n    let nextContext;\n\n    // fragment spreads operate inside the current context, so we recurse to get the proper\n    // selection set, but retain the current response context\n    if (Spread.prototype.isPrototypeOf(nextSelection)) {\n      nextContext = new DecodingContext(nextSelection, this.responseData, this.parent);\n    } else {\n      nextContext = new DecodingContext(nextSelection, this.responseData[responseKey], this);\n    }\n\n    if (!nextSelection) {\n      throw new Error(`Unexpected response key \"${responseKey}\", not found in selection set: ${this.selection.selectionSet}`);\n    }\n\n    if (Field.prototype.isPrototypeOf(nextSelection)) {\n      return nextContext;\n    } else {\n      return nextContext.contextForObjectProperty(responseKey);\n    }\n  }\n\n  contextForArrayItem(item) {\n    return new DecodingContext(this.selection, item, this.parent);\n  }\n}\n\nfunction decodeArrayItems(context, transformers) {\n  return context.responseData.map((item) => decodeContext(context.contextForArrayItem(item), transformers));\n}\n\nfunction decodeObjectValues(context, transformers) {\n  return Object.keys(context.responseData).reduce((acc, responseKey) => {\n    acc[responseKey] = decodeContext(context.contextForObjectProperty(responseKey), transformers);\n\n    return acc;\n  }, {});\n}\n\nfunction runTransformers(transformers, context, value) {\n  return transformers.reduce((acc, transformer) => {\n    return transformer(context, acc);\n  }, value);\n}\n\nfunction decodeContext(context, transformers) {\n  let value = context.responseData;\n\n  if (Array.isArray(value)) {\n    value = decodeArrayItems(context, transformers);\n  } else if (isObject(value)) {\n    value = decodeObjectValues(context, transformers);\n  }\n\n  return runTransformers(transformers, context, value);\n}\n\nfunction generateRefetchQueries(context, value) {\n  if (isValue(value) && isNodeContext(context)) {\n    value.refetchQuery = function() {\n      return new Query(context.selection.selectionSet.typeBundle, (root) => {\n        root.add('node', {args: {id: context.responseData.id}}, (node) => {\n          node.addInlineFragmentOn(context.selection.selectionSet.typeSchema.name, context.selection.selectionSet);\n        });\n      });\n    };\n  }\n\n  return value;\n}\n\nfunction transformPojosToClassesWithRegistry(classRegistry) {\n  return function transformPojosToClasses(context, value) {\n    if (isObject(value)) {\n      const Klass = classRegistry.classForType(context.selection.selectionSet.typeSchema.name);\n\n      return new Klass(value);\n    } else {\n      return value;\n    }\n  };\n}\n\nfunction transformScalars(context, value) {\n  if (isValue(value)) {\n    if (context.selection.selectionSet.typeSchema.kind === 'SCALAR') {\n      return new Scalar(value);\n    } else if (context.selection.selectionSet.typeSchema.kind === 'ENUM') {\n      return new Enum(value);\n    }\n  }\n\n  return value;\n}\n\nfunction recordTypeInformation(context, value) {\n  if (isValue(value)) {\n    if (value.__typename) {\n      value.type = schemaForType(context.selection.selectionSet.typeBundle, value.__typename);\n    } else {\n      value.type = context.selection.selectionSet.typeSchema;\n    }\n  }\n\n  return value;\n}\n\nfunction defaultTransformers({classRegistry = new ClassRegistry()}) {\n  return [\n    transformScalars,\n    generateRefetchQueries,\n    transformConnections,\n    recordTypeInformation,\n    transformPojosToClassesWithRegistry(classRegistry)\n  ];\n}\n\nexport default function decode(selection, responseData, options = {}) {\n  const transformers = options.transformers || defaultTransformers(options);\n  const context = new DecodingContext(selection, responseData);\n\n  return decodeContext(context, transformers);\n}\n","export default function httpFetcher(url, options = {}) {\n  return function fetcher(graphQLParams) {\n    return fetch(url, {\n      body: JSON.stringify(graphQLParams),\n      method: 'POST',\n      mode: 'cors',\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        ...options.headers\n      }\n    }).then((response) => response.json());\n  };\n}\n","import Document from './document';\nimport Query from './query';\nimport Mutation from './mutation';\nimport Operation from './operation';\nimport decode from './decode';\nimport ClassRegistry from './class-registry';\nimport httpFetcher from './http-fetcher';\nimport enumFunction from './enum';\nimport variableFunction from './variable';\n\nexport {default as GraphModel} from './graph-model';\nexport {ClassRegistry};\nexport {default as decode} from './decode';\n\nfunction hasNextPage(paginatedModels) {\n  return paginatedModels && paginatedModels.length && paginatedModels[paginatedModels.length - 1].hasNextPage;\n}\n\nexport default class Client {\n  constructor(typeBundle, {url, fetcherOptions, fetcher, registry = new ClassRegistry()}) {\n    this.typeBundle = typeBundle;\n    this.classRegistry = registry;\n\n    if (url && fetcher) {\n      throw new Error('Arguments not supported: supply either `url` and optional `fetcherOptions` OR use a `fetcher` function for further customization.');\n    }\n\n    if (url) {\n      this.fetcher = httpFetcher(url, fetcherOptions);\n    } else if (fetcher) {\n      if (fetcherOptions) {\n        throw new Error('Arguments not supported: when specifying your own `fetcher`, set options through it and not with `fetcherOptions`');\n      }\n\n      this.fetcher = fetcher;\n    } else {\n      throw new Error('Invalid arguments: one of `url` or `fetcher` is needed.');\n    }\n  }\n\n  document(...args) {\n    return new Document(this.typeBundle, ...args);\n  }\n\n  query(...args) {\n    return new Query(this.typeBundle, ...args);\n  }\n\n  mutation(...args) {\n    return new Mutation(this.typeBundle, ...args);\n  }\n\n  send(operationOrDocument, variableValues = null, otherProperties = null) {\n    const graphQLParams = {query: operationOrDocument.toString()};\n\n    if (variableValues) {\n      graphQLParams.variables = variableValues;\n    }\n\n    Object.assign(graphQLParams, otherProperties);\n\n    let operation;\n\n    if (Operation.prototype.isPrototypeOf(operationOrDocument)) {\n      operation = operationOrDocument;\n    } else {\n      const document = operationOrDocument;\n\n      if (document.operations.length === 1) {\n        operation = document.operations[0];\n      } else if (otherProperties.operationName) {\n        operation = document.operations.find((documentOperation) => documentOperation.name === otherProperties.operationName);\n      } else {\n        throw new Error(`\n          A document must contain exactly one operation, or an operationName\n          must be specified. Example:\n\n            client.send(document, null, {operationName: 'myFancyQuery'});\n        `);\n      }\n    }\n\n    return this.fetcher(graphQLParams).then((response) => {\n      if (response.data) {\n        response.model = decode(operation, response.data, {classRegistry: this.classRegistry});\n      }\n\n      return response;\n    });\n  }\n\n  fetchNextPage(nodeOrNodes, options) {\n    let node;\n\n    if (Array.isArray(nodeOrNodes)) {\n      node = nodeOrNodes[nodeOrNodes.length - 1];\n    } else {\n      node = nodeOrNodes;\n    }\n\n    const [query, path] = node.nextPageQueryAndPath();\n\n    return this.send(query, options).then((response) => {\n      response.model = path.reduce((object, key) => {\n        return object[key];\n      }, response.model);\n\n      return response;\n    });\n  }\n\n  fetchAllPages(paginatedModels, {pageSize}) {\n    if (hasNextPage(paginatedModels)) {\n      return this.fetchNextPage(paginatedModels, {first: pageSize}).then(({model}) => {\n        const pages = paginatedModels.concat(model);\n\n        return this.fetchAllPages(pages, {pageSize});\n      });\n    }\n\n    return Promise.resolve(paginatedModels);\n  }\n\n  refetch(nodeType) {\n    if (!nodeType) {\n      throw new Error('\\'client#refetch\\' must be called with a non-null instance of a Node.');\n    } else if (!nodeType.type.implementsNode) {\n      throw new Error(`'client#refetch' must be called with a type that implements Node. Received ${nodeType.type.name}.`);\n    }\n\n    return this.send(nodeType.refetchQuery()).then(({model}) => model.node);\n  }\n\n  variable(name, type, defaultValue) {\n    return variableFunction(name, type, defaultValue);\n  }\n\n  enum(key) {\n    return enumFunction(key);\n  }\n}\n"],"names":["join","fields","isObject","value","Boolean","Object","prototype","toString","call","valueOf","deepFreezeCopyExcept","predicate","structure","freeze","keys","reduce","copy","key","Array","isArray","map","item","schemaForType","typeBundle","typeName","type","types","Error","VariableDefinition","name","defaultValue","defaultValueString","formatInputValue","isVariable","variable","Enum","Scalar","isPrototypeOf","toInputValueString","String","JSON","stringify","formatObject","openChar","closeChar","argPairs","formatArgs","args","length","parseFieldCreationArgs","creationArgs","callback","noop","options","selectionSet","SelectionSet","emptyArgs","Field","alias","responseKey","aliasPrefix","Spread","InlineFragment","FragmentSpread","fragmentDefinition","FragmentDefinition","spread","selectionsHaveIdField","selections","some","fieldOrFragment","typeSchema","implementsNode","selectionsHaveTypenameField","indexSelectionsByResponseKey","assignOrPush","obj","push","unfrozenObject","acc","selection","responseKeys","selectionsByResponseKey","forEach","builderFunction","SelectionSetBuilder","unshift","kind","field","selectionOrFieldName","rest","hasSelectionWithResponseKey","parsedArgs","fieldBaseTypes","fieldBaseType","builderFunctionOrSelectionSet","add","connection","pageInfo","edges","addField","fieldTypeCb","inlineFragmentOn","fragmentSpread","parseArgs","variables","selectionSetCallback","VariableDefinitions","variableDefinitions","Operation","operationType","queryType","mutationType","nameString","Query","Mutation","isAnonymous","operation","hasAnonymousOperations","operations","hasDuplicateOperationNames","names","hasDuplicates","index","indexOf","extractOperation","isInvalidOperationCombination","fragmentNameIsNotUnique","existingDefinitions","definition","Document","definitions","concat","addOperation","onType","fragmentDefinitions","fragment","filter","GraphModel","attrs","descriptor","defineProperty","ClassRegistry","classStore","constructor","isValue","arg","isNodeContext","context","isConnection","endsWith","nearestNode","parent","contextsFromRoot","contextsFromNearestNode","addNextFieldTo","currentSelection","contextChain","cursor","path","nextContext","shift","newSelection","edgesField","find","nodeField","first","assign","after","addConnection","nextPageQueryAndPath","nearestNodeContext","nodeType","nodeId","responseData","id","query","root","node","addInlineFragmentOn","slice","hasNextPage","edge","hasPreviousPage","transformConnections","hasOwnProperty","DecodingContext","nestedSelections","nextSelection","contextForObjectProperty","decodeArrayItems","transformers","decodeContext","contextForArrayItem","decodeObjectValues","runTransformers","transformer","generateRefetchQueries","refetchQuery","transformPojosToClassesWithRegistry","classRegistry","transformPojosToClasses","Klass","classForType","transformScalars","recordTypeInformation","__typename","defaultTransformers","decode","httpFetcher","url","fetcher","graphQLParams","fetch","headers","then","response","json","paginatedModels","Client","fetcherOptions","registry","operationOrDocument","variableValues","otherProperties","document","operationName","documentOperation","data","model","nodeOrNodes","send","object","pageSize","fetchNextPage","pages","fetchAllPages","Promise","resolve","variableFunction","enumFunction"],"mappings":"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"}