'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (babel) {
  // get an instance of the `babel-plugin-add-header-comment`
  var plugin = (0, _babelPluginAddHeaderComment2.default)(babel);
  var visitor = plugin.visitor;
  var ProgramOriginal = visitor.Program.bind(visitor);

  plugin.visitor.Program = function (path, state) {
    var opts = Object.assign({
      newLineChar: '\n',
      cwd: process.cwd()
    }, state.opts);

    // read in the package-json
    opts.packageJSON = (0, _getPackageJson2.default)(opts);

    var newState = Object.assign({}, state);
    var newOpts = Object.assign({}, opts);
    newState.opts = newOpts;

    // if a header is defined then prepend the default header
    // and add the defined header after
    if (newOpts.header) {
      newOpts.header = (0, _getDefaultHeader2.default)(opts).concat(opts.header);
      // files are defined so add default headers to files
    } else if (opts.files) {
      (function () {
        var newFiles = void 0;

        // if files is an array then we want to add the default header
        // to those files
        if (Array.isArray(opts.files)) {
          newFiles = opts.files.reduce(function (nFiles, file) {
            nFiles[file] = {};
            nFiles[file].header = (0, _getDefaultHeader2.default)(opts);

            return nFiles;
          }, {});
          // we'll assume files is an Object in which case we want to add the
          // default header to the those headers
        } else {
          newFiles = {};

          // loop through each file and prepend default headers to those files
          Object.keys(opts.files).forEach(function (keyFile) {
            newFiles[keyFile] = {};
            newFiles[keyFile].header = (0, _getDefaultHeader2.default)(opts).concat(opts.files[keyFile].header);
          });
        }

        newOpts.files = newFiles;
        // header or files are not defined create a new header
      })();
    } else {
      newOpts.header = (0, _getDefaultHeader2.default)(opts);
    }

    ProgramOriginal(path, newState);
  };

  return plugin;
};

var _babelPluginAddHeaderComment = require('babel-plugin-add-header-comment');

var _babelPluginAddHeaderComment2 = _interopRequireDefault(_babelPluginAddHeaderComment);

var _getDefaultHeader = require('./get-default-header');

var _getDefaultHeader2 = _interopRequireDefault(_getDefaultHeader);

var _getPackageJson = require('./get-package-json');

var _getPackageJson2 = _interopRequireDefault(_getPackageJson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }