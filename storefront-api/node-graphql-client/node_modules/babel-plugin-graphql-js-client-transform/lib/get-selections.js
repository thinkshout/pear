'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getSelections;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _parseArg = require('./parse-arg');

var _parseArg2 = _interopRequireDefault(_parseArg);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Returns the body of the block statement representing the selections
function getSelections(selectionSet, parentSelections, spreadsId) {
  var clientId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : t.identifier('client');

  var selections = [];

  // Add each selection onto the parentSelection
  selectionSet.selections.forEach(function (selection) {
    var name = void 0;
    var spreadVariable = void 0;
    var addOperation = void 0;

    if (selection.kind === 'Field') {
      name = selection.name.value;
      addOperation = t.identifier('add');
    } else if (selection.kind === 'InlineFragment') {
      name = selection.typeCondition.name.value;
      addOperation = t.identifier('addInlineFragmentOn');
    } else {
      addOperation = t.identifier('addFragment');
      spreadVariable = t.memberExpression(spreadsId, t.identifier(selection.name.value));
    }

    var args = name ? [t.stringLiteral(name)] : [spreadVariable];
    var options = [];

    // Add alias to the query
    if (selection.alias) {
      options.push(t.objectProperty(t.identifier('alias'), t.stringLiteral(selection.alias.value)));
    }

    // Add arguments to the query
    if (selection.arguments && selection.arguments.length) {
      var graphQLArgs = [];

      selection.arguments.forEach(function (argument) {
        graphQLArgs.push((0, _parseArg2.default)(argument, clientId));
      });

      options.push(t.objectProperty(t.identifier('args'), t.objectExpression(graphQLArgs)));
    }

    // Add query options (i.e. alias and arguments) to the query
    if (options.length) {
      args.push(t.objectExpression(options));
    }

    // Add any selections on this selection
    if (selection.selectionSet) {
      parentSelections.push(name);
      args.push(t.arrowFunctionExpression([t.identifier(name)], t.blockStatement(getSelections(selection.selectionSet, parentSelections, spreadsId, clientId))));
      parentSelections.pop();
    }

    var parentSelection = parentSelections[parentSelections.length - 1];

    selections.push(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier(parentSelection), addOperation), args)));
  });

  return selections;
}