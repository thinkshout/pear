'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseArg;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _parseArgValue = require('./parse-arg-value');

var _parseArgValue2 = _interopRequireDefault(_parseArgValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function parseArg(arg) {
  var clientId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t.identifier('client');

  if (arg.value.value) {
    // Scalar or Enum arg value
    return t.objectProperty(t.identifier(arg.name.value), (0, _parseArgValue2.default)(arg.value, clientId));
  } else if (arg.value.fields) {
    // Object arg value
    var objectProperties = [];

    arg.value.fields.forEach(function (field) {
      objectProperties.push(parseArg(field, clientId));
    });

    return t.objectProperty(t.identifier(arg.name.value), t.objectExpression(objectProperties));
  } else {
    return t.objectProperty(t.identifier(arg.name.value), t.callExpression(t.memberExpression(clientId, t.identifier('variable')), [t.stringLiteral(arg.value.name.value)]));
  }
}