'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseVariable;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _parseArgValue = require('./parse-arg-value');

var _parseArgValue2 = _interopRequireDefault(_parseArgValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function extractVariableType(variable) {
  switch (variable.kind) {
    case 'NonNullType':
      return extractVariableType(variable.type) + '!';
    case 'ListType':
      return '[' + extractVariableType(variable.type) + ']';
    default:
      // NamedType
      return variable.name.value;
  }
}

// Parses a GraphQL AST variable and returns the babel type for the variable in query builder syntax
// variable('first', 'Int!')
function parseVariable(variable) {
  var clientId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : t.identifier('client');

  var args = [t.stringLiteral(variable.variable.name.value), t.stringLiteral(extractVariableType(variable.type))];

  if (variable.defaultValue) {
    args.push((0, _parseArgValue2.default)(variable.defaultValue, clientId));
  }

  return t.callExpression(t.memberExpression(clientId, t.identifier('variable')), args);
}