/**
* The MIT License (MIT)
* Copyright (c) 2017 Shopify Inc.
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
* DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
* OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
* OR OTHER DEALINGS IN THE SOFTWARE.
* 
* 
* Version: 1.1.0 Commit: e5f3eb1
**/'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function () {
  return {
    visitor: {
      ImportSpecifier: function ImportSpecifier(path, state) {
        // Find the gql import
        if (path.node.imported.name === 'gql') {
          // Save the name of the import
          state.tag = path.node.local.name;
        }
      },
      TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {
        if (path.node.tag.callee && path.node.tag.callee.name === state.tag) {
          path.traverse(templateElementVisitor, { parentPath: path, clientId: path.node.tag.arguments[0] });
        }
      }
    }
  };
};

exports.gql = gql;

var _language = require('graphql/language');

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _parseDocument = require('./parse-document');

var _parseDocument2 = _interopRequireDefault(_parseDocument);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var templateElementVisitor = {
  TemplateElement: function TemplateElement(path) {
    var statementParentPath = path.getStatementParent();
    var documentId = statementParentPath.scope.generateUidIdentifier('document');

    // Create the document to be sent
    statementParentPath.insertBefore(t.variableDeclaration('const', [t.variableDeclarator(documentId, t.callExpression(t.memberExpression(this.clientId, t.identifier('document')), []))]));

    // Parse the document into a GraphQL AST
    var document = (0, _language.parse)(path.node.value.raw);

    // Convert the GraphQL AST into a list of Babel AST nodes of the query building
    var babelAstNodes = (0, _parseDocument2.default)(document, documentId, statementParentPath.scope, this.clientId);

    statementParentPath.insertBefore(babelAstNodes);

    this.parentPath.replaceWith(documentId);
  }
};

/**
 * This function should not be invoked.
 * This function is used to tag raw GraphQL queries that will be
 * transcompiled into graphql-js-client's query builder syntax.
 */
function gql() {
  throw new Error('This function should not be invoked. It should be used to tag template literals that will be\n    transcompiled into graphql-js-client\'s query builder syntax.');
}