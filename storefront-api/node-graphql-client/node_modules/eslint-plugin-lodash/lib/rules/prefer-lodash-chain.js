/**
 * @fileoverview Rule to check if there's a JS native method in the lodash chain
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var isLodashChainStart = _require.isLodashChainStart;
    var isChainBreaker = _require.isChainBreaker;
    var isNativeCollectionMethodCall = _require.isNativeCollectionMethodCall;
    var isLodashWrapperMethod = _require.isLodashWrapperMethod;
    var isLodashCall = _require.isLodashCall;

    var _require2 = require('../util/astUtil');

    var isMethodCall = _require2.isMethodCall;
    var isObjectOfMethodCall = _require2.isObjectOfMethodCall;
    var getMethodName = _require2.getMethodName;

    var settings = require('../util/settingsUtil').getSettings(context);
    var REPORT_MESSAGE = "Do not break chain before method '{{method}}'.";

    return {
        CallExpression: function CallExpression(node) {
            if (isLodashChainStart(node, settings.pragma)) {
                do {
                    node = node.parent.parent;
                } while (isMethodCall(node) && !isChainBreaker(node, settings.version));
                if (isChainBreaker(node, settings.version) && isObjectOfMethodCall(node)) {
                    var callAfterChainBreak = node.parent.parent;
                    if (isNativeCollectionMethodCall(callAfterChainBreak) || isLodashWrapperMethod(callAfterChainBreak, settings.version)) {
                        context.report({ node: callAfterChainBreak, message: REPORT_MESSAGE, data: { method: getMethodName(callAfterChainBreak) } });
                    }
                }
            } else if (isLodashCall(node, settings.pragma)) {
                if (node.parent.type === 'MemberExpression' && isMethodCall(node.parent.parent) && isNativeCollectionMethodCall(node.parent.parent)) {
                    context.report({ node: node.parent.parent, message: REPORT_MESSAGE, data: { method: getMethodName(node.parent.parent) } });
                }
            }
        }
    };
};