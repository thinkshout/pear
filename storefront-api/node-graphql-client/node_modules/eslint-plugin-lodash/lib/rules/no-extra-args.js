/**
 * @fileoverview Rule to make sure lodash method calls don't use superfluous arguments
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var settings = require('../util/settingsUtil').getSettings(context);

    var _require = require('../util/lodashUtil');

    var isLodashCall = _require.isLodashCall;
    var getLodashMethodVisitor = _require.getLodashMethodVisitor;

    var _require2 = require('../util/astUtil');

    var getMethodName = _require2.getMethodName;

    var _require3 = require('../util/methodDataUtil');

    var getFunctionMaxArity = _require3.getFunctionMaxArity;


    function getExpectedArity(node) {
        var maxArity = getFunctionMaxArity(settings.version, getMethodName(node));
        return Math.max(isLodashCall(node, settings.pragma) ? maxArity : maxArity - 1, 0);
    }

    return {
        CallExpression: getLodashMethodVisitor(settings, function (node) {
            var expectedArity = getExpectedArity(node);
            if (node.arguments.length > expectedArity) {
                context.report({
                    node: node,
                    message: 'Too many arguments passed to `{{method}}` (expected {{expectedArity}}).',
                    data: { method: getMethodName(node), expectedArity: expectedArity }
                });
            }
        })
    };
};