/**
 * @fileoverview Rule to enforce usage of collection method values
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var isChainBreaker = _require.isChainBreaker;
    var isLodashCollectionMethod = _require.isLodashCollectionMethod;
    var isCallToMethod = _require.isCallToMethod;
    var isSideEffectIterationMethod = _require.isSideEffectIterationMethod;
    var isLodashCall = _require.isLodashCall;
    var isLodashChainStart = _require.isLodashChainStart;

    var _require2 = require('../util/astUtil');

    var getMethodName = _require2.getMethodName;
    var isMethodCall = _require2.isMethodCall;

    var settings = require('../util/settingsUtil').getSettings(context);

    function parentUsesValue(node, isChain) {
        var isBeforeChainBreaker = isChain && isChainBreaker(node.parent.parent, settings.version);
        return (isBeforeChainBreaker ? node.parent.parent : node).parent.type !== 'ExpressionStatement';
    }

    function isPureLodashCollectionMethod(node) {
        return isLodashCollectionMethod(node, settings.version) && !isCallToMethod(node, settings.version, 'remove');
    }

    function reportIfMisused(node, isChain) {
        if (isPureLodashCollectionMethod(node) && !parentUsesValue(node, isChain)) {
            context.report(node, 'Use value returned from _.' + getMethodName(node));
        } else if (isSideEffectIterationMethod(node, settings.version) && parentUsesValue(node, isChain)) {
            context.report(node, 'Do not use value returned from _.' + getMethodName(node));
        }
    }

    return {
        CallExpression: function CallExpression(node) {
            if (isLodashCall(node, settings.pragma)) {
                reportIfMisused(node, false);
            }
            if (isLodashChainStart(node, settings.pragma)) {
                var curr = node;
                while (isMethodCall(curr.parent.parent) && !isChainBreaker(curr.parent.parent, settings.version)) {
                    curr = curr.parent.parent;
                }
                reportIfMisused(curr, true);
            }
        }
    };
};