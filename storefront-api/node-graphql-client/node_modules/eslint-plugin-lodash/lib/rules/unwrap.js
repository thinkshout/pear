/**
 * @fileoverview Rule to ensure a lodash chain ends
 */
'use strict';

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var isImplicitChainStart = _require.isImplicitChainStart;
    var isExplicitChainStart = _require.isExplicitChainStart;
    var isChainable = _require.isChainable;
    var isCallToMethod = _require.isCallToMethod;
    var isChainBreaker = _require.isChainBreaker;

    var settings = require('../util/settingsUtil').getSettings(context);

    var _require2 = require('../util/astUtil');

    var getCaller = _require2.getCaller;

    var negate = require('lodash/negate');

    function isCommit(node) {
        return isCallToMethod(node, settings.version, 'commit');
    }

    function getEndOfChain(node, isExplicit) {
        var stillInChain = isExplicit ? negate(isChainBreaker) : isChainable;
        var curr = node.parent.parent;
        while (curr === getCaller(curr.parent.parent) && stillInChain(curr, settings.version)) {
            curr = curr.parent.parent;
        }
        return curr;
    }

    return {
        CallExpression: function CallExpression(node) {
            if (isImplicitChainStart(node, settings.pragma)) {
                var end = getEndOfChain(node, false);
                if (!isCommit(end) && isChainable(end, settings.version)) {
                    context.report(end, 'Missing unwrapping at end of chain');
                }
            } else if (isExplicitChainStart(node, settings.pragma)) {
                var _end = getEndOfChain(node, true);
                if (!isCommit(_end) && !isChainBreaker(_end, settings.version)) {
                    context.report(_end, 'Missing unwrapping at end of chain');
                }
            }
        }
    };
};