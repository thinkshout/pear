/**
 * @fileoverview Rule to check if a call to _.forEach should be a call to _.filter
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var getLodashMethodVisitor = _require.getLodashMethodVisitor;
    var isCallToMethod = _require.isCallToMethod;

    var _require2 = require('../util/astUtil');

    var isIdentifierOfParam = _require2.isIdentifierOfParam;
    var isMemberExpOf = _require2.isMemberExpOf;
    var isNegationOfMemberOf = _require2.isNegationOfMemberOf;
    var isEqEqEqToMemberOf = _require2.isEqEqEqToMemberOf;
    var isNotEqEqToMemberOf = _require2.isNotEqEqToMemberOf;
    var getFirstFunctionLine = _require2.getFirstFunctionLine;
    var hasOnlyOneStatement = _require2.hasOnlyOneStatement;
    var getFirstParamName = _require2.getFirstParamName;

    var settings = require('../util/settingsUtil').getSettings(context);
    var DEFAULT_MAX_PROPERTY_PATH_LENGTH = 3;
    var maxPropertyPathLength = parseInt(context.options[0], 10) || DEFAULT_MAX_PROPERTY_PATH_LENGTH;

    function isIfWithoutElse(statement) {
        return statement && statement.type === 'IfStatement' && !statement.alternate;
    }

    function canBeShorthand(exp, paramName) {
        return isIdentifierOfParam(exp, paramName) || isMemberExpOf(exp, paramName, maxPropertyPathLength) || isNegationOfMemberOf(exp, paramName, maxPropertyPathLength) || isEqEqEqToMemberOf(exp, paramName, maxPropertyPathLength) || isNotEqEqToMemberOf(exp, paramName, maxPropertyPathLength);
    }

    function onlyHasSimplifiableIf(func) {
        var firstLine = getFirstFunctionLine(func);
        return func && hasOnlyOneStatement(func) && func.params.length === 1 && isIfWithoutElse(firstLine) && canBeShorthand(firstLine.test, getFirstParamName(func));
    }

    return {
        CallExpression: getLodashMethodVisitor(settings, function (node, iteratee) {
            if (isCallToMethod(node, settings.version, 'forEach') && onlyHasSimplifiableIf(iteratee)) {
                context.report(node, 'Prefer _.filter or _.some over an if statement inside a _.forEach');
            }
        })
    };
};

module.exports.schema = [{
    type: 'integer'
}];