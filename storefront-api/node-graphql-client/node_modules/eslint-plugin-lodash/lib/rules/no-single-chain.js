/**
 * @fileoverview Rule to disallow the use of a chain for a single method
 */
'use strict';

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var isChainBreaker = _require.isChainBreaker;
    var isLodashChainStart = _require.isLodashChainStart;

    var _require2 = require('../util/astUtil');

    var isObjectOfMethodCall = _require2.isObjectOfMethodCall;
    var isMethodCall = _require2.isMethodCall;

    var settings = require('../util/settingsUtil').getSettings(context);
    var negate = require('lodash/negate');

    var isEndOfChain = negate(isObjectOfMethodCall);

    function isBeforeChainBreaker(node) {
        return isChainBreaker(node.parent.parent, settings.version);
    }

    return {
        CallExpression: function CallExpression(node) {
            if (isLodashChainStart(node, settings.pragma)) {
                var firstCall = node.parent.parent;
                if (isMethodCall(firstCall) && (isEndOfChain(firstCall) || isBeforeChainBreaker(firstCall))) {
                    context.report(firstCall, 'Do not use chain syntax for single method');
                }
            }
        }
    };
};