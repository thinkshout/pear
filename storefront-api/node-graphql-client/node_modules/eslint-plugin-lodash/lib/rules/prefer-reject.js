/**
 * @fileoverview Rule to check if a call to filter should be a call to reject
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var isLodashCallToMethod = _require.isLodashCallToMethod;
    var getLodashMethodVisitor = _require.getLodashMethodVisitor;
    var isCallToMethod = _require.isCallToMethod;

    var _require2 = require('../util/astUtil');

    var getValueReturnedInFirstLine = _require2.getValueReturnedInFirstLine;
    var getFirstParamName = _require2.getFirstParamName;
    var isNegationOfMemberOf = _require2.isNegationOfMemberOf;
    var isNotEqEqToMemberOf = _require2.isNotEqEqToMemberOf;

    var settings = require('../util/settingsUtil').getSettings(context);
    var DEFAULT_MAX_PROPERTY_PATH_LENGTH = 3;
    var maxPropertyPathLength = parseInt(context.options[0], 10) || DEFAULT_MAX_PROPERTY_PATH_LENGTH;

    function isNegativeExpressionFunction(func) {
        var returnValue = getValueReturnedInFirstLine(func);
        var firstParamName = getFirstParamName(func);
        return isNegationOfMemberOf(returnValue, firstParamName, maxPropertyPathLength) || isNotEqEqToMemberOf(returnValue, firstParamName, maxPropertyPathLength) || isLodashCallToMethod(func, settings, 'negate');
    }

    return {
        CallExpression: getLodashMethodVisitor(settings, function (node, iteratee) {
            if (isCallToMethod(node, settings.version, 'filter') && isNegativeExpressionFunction(iteratee)) {
                context.report(node, 'Prefer _.reject over negative condition');
            }
        })
    };
};

module.exports.schema = [{
    type: 'integer'
}];