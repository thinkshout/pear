/**
 * @fileoverview Rule to check if an indexOfComparison should be a call to _.includes
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var includeNative = context.options[0] && context.options[0].includeNative;

    var _require = require('../util/astUtil');

    var getExpressionComparedToInt = _require.getExpressionComparedToInt;
    var isIndexOfCall = _require.isIndexOfCall;

    var _require2 = require('../util/lodashUtil');

    var isLodashCall = _require2.isLodashCall;

    var settings = require('../util/settingsUtil').getSettings(context);
    return {
        BinaryExpression: function BinaryExpression(node) {
            var callExp = getExpressionComparedToInt(node, -1, true);
            if (isIndexOfCall(callExp) && (includeNative || isLodashCall(callExp, settings.pragma))) {
                context.report(node, 'Prefer _.includes over indexOf comparison to -1');
            }
        }
    };
};

module.exports.schema = [{
    type: 'object',
    properties: {
        includeNative: {
            type: 'boolean'
        }
    }
}];