/**
 * @fileoverview Rule to check if a call to map should be a call to invokeMap
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var getLodashMethodVisitor = _require.getLodashMethodVisitor;
    var isCallToMethod = _require.isCallToMethod;

    var _require2 = require('../util/astUtil');

    var isCallFromObject = _require2.isCallFromObject;
    var getValueReturnedInFirstLine = _require2.getValueReturnedInFirstLine;
    var getFirstParamName = _require2.getFirstParamName;

    var settings = require('../util/settingsUtil').getSettings(context);
    function isFunctionMethodCallOfParam(func) {
        var firstParamName = getFirstParamName(func);
        return firstParamName && isCallFromObject(getValueReturnedInFirstLine(func), firstParamName);
    }

    return {
        CallExpression: getLodashMethodVisitor(settings, function (node, iteratee) {
            if (isCallToMethod(node, settings.version, 'map') && isFunctionMethodCallOfParam(iteratee)) {
                context.report(node, 'Prefer _.invokeMap over map to a method call.');
            }
        })
    };
};