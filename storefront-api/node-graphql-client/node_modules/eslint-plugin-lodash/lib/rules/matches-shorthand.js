/**
 * @fileoverview Rule to check if the matches shorthand can be used
 */
'use strict';

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = function (context) {
    var matches = require('lodash/matches');

    var _require = require('../util/lodashUtil');

    var isLodashCallToMethod = _require.isLodashCallToMethod;
    var getShorthandVisitor = _require.getShorthandVisitor;

    var _require2 = require('../util/astUtil');

    var isEqEqEq = _require2.isEqEqEq;
    var isMemberExpOf = _require2.isMemberExpOf;
    var isEqEqEqToMemberOf = _require2.isEqEqEqToMemberOf;
    var getValueReturnedInFirstLine = _require2.getValueReturnedInFirstLine;
    var getFirstParamName = _require2.getFirstParamName;

    var settingsUtil = require('../util/settingsUtil');
    var settings = settingsUtil.getSettings(context);
    var DEFAULT_MAX_PROPERTY_PATH_LENGTH = 3;
    var onlyLiterals = context.options[3] && context.options[3].onlyLiterals;

    var isConjunction = matches({ type: 'LogicalExpression', operator: '&&' });

    function canBeObjectLiteralWithShorthandProperty(node, paramName) {
        return settingsUtil.isEcmaFeatureOn(context, 'objectLiteralShorthandProperties') && isEqEqEq(node) && (isMemberExpOf(node.left, paramName, 1) && node.left.property.type === 'Identifier' && node.right.type === 'Identifier' && node.left.property.name === node.right.name || isMemberExpOf(node.right, paramName, 1) && node.right.property.type === 'Identifier' && node.left.type === 'Identifier' && node.right.property.name === node.left.name);
    }

    function isConjunctionOfEqEqEqToMemberOf(exp, paramName, maxPropertyPathLength) {
        var allowComputed = context.options[2] && settingsUtil.isEcmaFeatureOn(context, 'objectLiteralComputedProperties');
        if (isConjunction(exp) || canBeObjectLiteralWithShorthandProperty(exp, paramName)) {
            var checkStack = [exp];
            var curr = void 0;
            var allParamMemberEq = true;
            curr = checkStack.pop();
            while (curr) {
                if (isConjunction(curr)) {
                    checkStack.push(curr.left, curr.right);
                } else if (!isEqEqEqToMemberOf(curr, paramName, maxPropertyPathLength, allowComputed, onlyLiterals)) {
                    allParamMemberEq = false;
                }
                curr = checkStack.pop();
            }
            return allParamMemberEq;
        }
    }

    function isFunctionDeclarationThatCanUseShorthand(func) {
        var maxPropertyPathLength = context.options[1] || DEFAULT_MAX_PROPERTY_PATH_LENGTH;
        return isConjunctionOfEqEqEqToMemberOf(getValueReturnedInFirstLine(func), getFirstParamName(func), maxPropertyPathLength);
    }

    function canUseShorthand(iteratee) {
        return isFunctionDeclarationThatCanUseShorthand(iteratee) || isLodashCallToMethod(iteratee, settings, 'matches');
    }

    function usesShorthand(node, iteratee) {
        return iteratee && iteratee.type === 'ObjectExpression';
    }

    return {
        CallExpression: getShorthandVisitor(context, settings, {
            canUseShorthand: canUseShorthand,
            usesShorthand: usesShorthand
        }, {
            always: 'Prefer matches syntax',
            never: 'Do not use matches syntax'
        })
    };
};

module.exports.schema = [{
    enum: ['always', 'never']
}, {
    type: 'integer',
    minimum: 1
}, {
    type: 'boolean'
}, {
    type: 'object',
    properties: {
        onlyLiterals: {
            type: 'boolean'
        }
    }
}];