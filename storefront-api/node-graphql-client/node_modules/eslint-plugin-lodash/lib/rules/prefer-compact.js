/**
 * @fileoverview Rule to check if a call to filter should be a call to compact
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var getLodashMethodVisitor = _require.getLodashMethodVisitor;
    var isCallToMethod = _require.isCallToMethod;

    var _require2 = require('../util/astUtil');

    var isNegationExpression = _require2.isNegationExpression;
    var isIdentifierOfParam = _require2.isIdentifierOfParam;
    var getValueReturnedInFirstLine = _require2.getValueReturnedInFirstLine;
    var getFirstParamName = _require2.getFirstParamName;

    var settings = require('../util/settingsUtil').getSettings(context);
    function isDoubleNegationOfParam(exp, paramName) {
        return isNegationExpression(exp) && isNegationExpression(exp.argument) && isIdentifierOfParam(exp.argument.argument, paramName);
    }

    function isCallToBooleanCastOfParam(exp, paramName) {
        return exp && exp.type === 'CallExpression' && exp.callee.name === 'Boolean' && isIdentifierOfParam(exp.arguments[0], paramName);
    }

    function isBooleanCastingFunction(func) {
        var returnValue = getValueReturnedInFirstLine(func);
        var paramName = getFirstParamName(func);
        return func && func.type === 'Identifier' && func.name === 'Boolean' || isIdentifierOfParam(returnValue, paramName) || isDoubleNegationOfParam(returnValue, paramName) || isCallToBooleanCastOfParam(returnValue, paramName);
    }

    return {
        CallExpression: getLodashMethodVisitor(settings, function (node, iteratee) {
            if (isCallToMethod(node, settings.version, 'filter') && isBooleanCastingFunction(iteratee)) {
                context.report(node, 'Prefer _.compact over filtering of Boolean casting');
            }
        })
    };
};