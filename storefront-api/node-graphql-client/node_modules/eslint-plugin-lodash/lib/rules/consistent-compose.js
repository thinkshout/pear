/**
 * @fileoverview Rule to enforce a consistent composition method
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

var possibleDirections = ['pipe', 'compose', 'flow', 'flowRight'];
module.exports = function (context) {
    var includes = require('lodash/includes');

    var _require = require('../util/lodashUtil');

    var getLodashMethodVisitor = _require.getLodashMethodVisitor;

    var settings = require('../util/settingsUtil').getSettings(context);

    var _require2 = require('../util/astUtil');

    var getMethodName = _require2.getMethodName;

    var _require3 = require('../util/methodDataUtil');

    var getMainAlias = _require3.getMainAlias;


    var direction = context.options[0] || 'flow';
    var mainDirectionMethod = getMainAlias(settings.version, direction);

    function isOtherDirection(methodName) {
        if (includes(possibleDirections, methodName)) {
            var methodDirection = getMainAlias(settings.version, methodName);
            return methodDirection !== mainDirectionMethod;
        }
    }

    return {
        CallExpression: getLodashMethodVisitor(settings, function (node) {
            if (isOtherDirection(getMethodName(node))) {
                context.report(node, 'Use _.' + direction + ' for composition');
            }
        })
    };
};

module.exports.schema = [{
    enum: possibleDirections
}];