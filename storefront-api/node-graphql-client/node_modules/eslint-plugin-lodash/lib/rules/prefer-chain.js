/**
 * @fileoverview Rule to check if the expression could be better expressed as a chain
 */
'use strict';

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var isLodashCall = _require.isLodashCall;

    var _require2 = require('../util/astUtil');

    var getCaller = _require2.getCaller;

    var DEFAULT_LENGTH = 3;
    var settings = require('../util/settingsUtil').getSettings(context);
    var ruleDepth = parseInt(context.options[0], 10) || DEFAULT_LENGTH;

    function isNestedNLevels(node, n) {
        return n === 0 || isLodashCall(node, settings.pragma) && isNestedNLevels(node.arguments[0], n - 1);
    }

    return {
        CallExpression: function CallExpression(node) {
            if (isNestedNLevels(node, ruleDepth)) {
                context.report(getCaller(node.arguments[0]), 'Prefer chaining to composition');
            }
        }
    };
};

module.exports.schema = [{
    type: 'integer',
    minimum: 2
}];