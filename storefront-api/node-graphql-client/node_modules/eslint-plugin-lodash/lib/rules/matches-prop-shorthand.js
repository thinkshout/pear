/**
 * @fileoverview Rule to check if the macthesProperty shorthand can be used
 */
'use strict';

// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------

module.exports = function (context) {
    var _require = require('../util/lodashUtil');

    var isLodashCallToMethod = _require.isLodashCallToMethod;
    var getShorthandVisitor = _require.getShorthandVisitor;

    var _require2 = require('../util/astUtil');

    var isEqEqEqToMemberOf = _require2.isEqEqEqToMemberOf;
    var getValueReturnedInFirstLine = _require2.getValueReturnedInFirstLine;
    var getFirstParamName = _require2.getFirstParamName;

    var settings = require('../util/settingsUtil').getSettings(context);
    var onlyLiterals = context.options[1] && context.options[1].onlyLiterals;

    function isFunctionDeclarationThatCanUseShorthand(func) {
        return isEqEqEqToMemberOf(getValueReturnedInFirstLine(func), getFirstParamName(func), Infinity, false, onlyLiterals);
    }

    function canUseShorthand(iteratee) {
        return isFunctionDeclarationThatCanUseShorthand(iteratee) || isLodashCallToMethod(iteratee, settings, 'matchesProperty');
    }

    function callHasExtraParamAfterIteratee(node, iteratee) {
        return node.arguments[node.arguments.indexOf(iteratee) + 1];
    }

    var matchesPropertyChecks = {
        3: function _(node, iteratee) {
            return iteratee && iteratee.type === 'Literal' && callHasExtraParamAfterIteratee(node, iteratee);
        },
        4: function _(node, iteratee) {
            return iteratee && iteratee.type === 'ArrayExpression';
        }
    };

    return {
        CallExpression: getShorthandVisitor(context, settings, {
            canUseShorthand: canUseShorthand,
            usesShorthand: matchesPropertyChecks[settings.version]
        }, {
            always: 'Prefer matches property syntax',
            never: 'Do not use matches property syntax'
        })
    };
};

module.exports.schema = [{
    enum: ['always', 'never']
}, {
    type: 'object',
    properties: {
        onlyLiterals: {
            type: 'boolean'
        }
    }
}];